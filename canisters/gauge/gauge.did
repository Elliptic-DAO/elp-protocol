type HttpRequest = record {
    url : text;
    method : text;
    body : vec nat8;
    headers : vec record { text; text };
};

type HttpResponse = record {
    body : vec nat8;
    headers : vec record { text; text };
    status_code : nat16;
};

type Result = variant {
    Ok : nat64;
    Err : TransferError;
};

type TransferError = variant {
    GenericError : record {
    message : text;
    error_code : nat;
    };
    TemporarilyUnavailable;
    BadBurn : record {
        min_burn_amount : nat;
    };
    Duplicate : record {
        duplicate_of : nat;
    };
    BadFee : record {
        expected_fee : nat;
    };
    CreatedInFuture : record {
        ledger_time : nat64;
    };
    TooOld;
    InsufficientFunds : record {
        balance : nat;
    };
};

service : (principal, principal) -> {
    http_request : (HttpRequest) -> (HttpResponse) query;
    register_user : (text) -> (Result);
    set_key : (text) -> ();
}